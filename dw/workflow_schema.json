{
    "$id": "https://github.com/dkackman/diffusers-helper/workflow",
    "$schema": "https://json-schema.org/draft/2020-12/schema#",
    "description": "The definition of the diffusers-workflow.",
    "type": "object",
    "properties": {
        "id": {
            "type": "string"
        },
        "variables": {
            "$ref": "#/$defs/arguments"
        },
        "seed": {
            "description": "Default seed for the entire workflow",
            "type": "integer",
            "format": "int64"
        },
        "steps": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/$defs/step"
            }
        }
    },
    "required": [
        "id",
        "steps"
    ],
    "$defs": {
        "image": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "format": "uri"
                },
                "size": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "integer",
                            "format": "int16"
                        },
                        "height": {
                            "type": "integer",
                            "format": "int16"
                        }
                    }
                }
            },
            "required": [
                "location"
            ]
        },
        "step": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "seed": {
                    "description": "Default seed for the entire step",
                    "type": "integer",
                    "format": "int64"
                },
                "task": {
                    "$ref": "#/$defs/task"
                },
                "pipeline": {
                    "$ref": "#/$defs/pipeline"
                },
                "pipeline_reference": {
                    "$ref": "#/$defs/pipeline_reference"
                },
                "workflow": {
                    "$ref": "#/$defs/workflow_reference"
                },
                "result": {
                    "$ref": "#/$defs/result"
                }
            },
            "oneOf": [
                {
                    "required": [
                        "name",
                        "task"
                    ]
                },
                {
                    "required": [
                        "name",
                        "pipeline"
                    ]
                },
                {
                    "required": [
                        "name",
                        "pipeline_reference"
                    ]
                },
                {
                    "required": [
                        "name",
                        "workflow"
                    ]
                }
            ]
        },
        "arguments": {
            "type": "object",
            "additionalProperties": {
                "type": [
                    "string",
                    "integer",
                    "number",
                    "object",
                    "array",
                    "boolean"
                ]
            }
        },
        "pipeline_reference": {
            "type": "object",
            "properties": {
                "reference_name": {
                    "type": "string"
                },
                "arguments": {
                    "$ref": "#/$defs/arguments"
                }
            },
            "required": [
                "reference_name",
                "arguments"
            ]
        },
        "pipeline": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/$defs/pipeline_configuration"
                },
                "scheduler": {
                    "$ref": "#/$defs/scheduler"
                },
                "model": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "transformer": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "vae": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "unet": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "text_encoder": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "text_encoder_2": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "text_encoder_3": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "tokenizer": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "tokenizer_2": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "tokenizer_3": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "image_encoder": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "feature_extractor": {
                    "$ref": "#/$defs/pipeline_component"
                },
                "controlnet": {
                    "$ref": "#/$defs/controlnet"
                },
                "loras": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/lora"
                    }
                },
                "ip_adapter": {
                    "$ref": "#/$defs/ip_adapter"
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                },
                "seed": {
                    "description": "The seed for this pipeline",
                    "type": "integer",
                    "format": "int64"
                },
                "arguments": {
                    "$ref": "#/$defs/arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments",
                "arguments"
            ]
        },
        "pipeline_configuration": {
            "type": "object",
            "properties": {
                "offload": {
                    "type": "string",
                    "enum": [
                        "model",
                        "sequential"
                    ]
                },
                "component_type": {
                    "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                    "type": "string"
                },
                "no_generator": {
                    "description": "Whether to use a generator for the pipeline. Some pipelines do not support generators.",
                    "type": "boolean"
                },
                "vae": {
                    "type": "object",
                    "properties": {
                        "enable_slicing": {
                            "type": "boolean"
                        },
                        "enable_tiling": {
                            "type": "boolean"
                        },
                        "set_memory_format": {
                            "type": "boolean"
                        },
                        "torch_dtype": {
                            "type": "string"
                        }
                    }
                },
                "unet": {
                    "type": "object",
                    "properties": {
                        "enable_forward_chunking": {
                            "type": "boolean"
                        },
                        "set_memory_format": {
                            "type": "boolean"
                        },
                        "torch_dtype": {
                            "type": "string"
                        }
                    }
                },
                "text_encoder": {
                    "type": "object",
                    "properties": {
                        "torch_dtype": {
                            "type": "string"
                        }
                    }
                },
                "shared_components": {
                    "description": "The names of pipeline components to be shared across for future iterations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "reused_components": {
                    "description": "The names of pipeline components to be reused from previous iterations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "component_type"
            ]
        },
        "scheduler": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "scheduler_type": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "scheduler_type"
                    ]
                },
                "from_config_args": {
                    "$ref": "#/$defs/arguments"
                }
            },
            "required": [
                "configuration"
            ]
        },
        "pipeline_component": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "component_type": {
                            "description": "The python type of pipeline component to use in the format 'module.typename' module defaults to diffusers",
                            "type": "string"
                        }
                    },
                    "required": [
                        "component_type"
                    ]
                },
                "quantization_config": {
                    "$ref": "#/$defs/quantization_config"
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "quantization_config": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "config_type": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "config_type"
                    ]
                },
                "arguments": {
                    "$ref": "#/$defs/arguments"
                }
            },
            "required": [
                "configuration",
                "arguments"
            ]
        },
        "controlnet": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/$defs/pipeline_configuration"
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "ip_adapter": {
            "type": "object",
            "properties": {
                "model_name": {
                    "description": "The huggingface hub name of the ip adadapter model to use.",
                    "type": "string"
                },
                "weight_name": {
                    "description": "The file name of the ip adapter weights.",
                    "type": "string"
                },
                "subfolder": {
                    "description": "The subfolder location of a model file within a larger model repository",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "scale": {
                    "description": "The scale factor of the ip adapter.",
                    "type": "number",
                    "format": "float"
                }
            },
            "required": [
                "model_name"
            ]
        },
        "lora": {
            "type": "object",
            "properties": {
                "model_name": {
                    "description": "The huggingface hub name of the lora.",
                    "type": "string"
                },
                "weight_name": {
                    "description": "The file name of the lora weights.",
                    "type": "string"
                },
                "subfolder": {
                    "description": "The subfolder location of a model file within a larger model repository",
                    "type": "string"
                },
                "scale": {
                    "description": "The scale factor of the lora when fusing.",
                    "type": "number",
                    "format": "float"
                }
            },
            "required": [
                "model_name"
            ]
        },
        "from_pretrained_arguments": {
            "type": "object",
            "description": "Arguments to pass to the from_pretrained function when creating the component",
            "properties": {
                "model_name": {
                    "description": "The huggingface hub name of the pretrained model to load",
                    "type": "string"
                },
                "from_single_file": {
                    "description": "Location of a checkpoint model from a single file",
                    "type": "string"
                },
                "task": {
                    "description": "The name of a task that transformers.Pipeline understands",
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": [
                    "string",
                    "number",
                    "object",
                    "array",
                    "boolean",
                    "null"
                ]
            },
            "oneOf": [
                {
                    "required": [
                        "model_name"
                    ]
                },
                {
                    "required": [
                        "from_single_file"
                    ]
                },
                {
                    "required": [
                        "task"
                    ]
                }
            ]
        },
        "task": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "arguments": {
                    "$ref": "#/$defs/arguments"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "type": [
                            "string",
                            "integer",
                            "number",
                            "object",
                            "boolean"
                        ]
                    }
                }
            },
            "oneOf": [
                {
                    "required": [
                        "command",
                        "arguments"
                    ]
                },
                {
                    "required": [
                        "command",
                        "inputs"
                    ]
                }
            ]
        },
        "workflow_reference": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "The path to the workflow file. Use 'builtin:' for built-in workflows.",
                    "type": "string"
                },
                "arguments": {
                    "$ref": "#/$defs/arguments"
                }
            }
        },
        "result": {
            "type": "object",
            "properties": {
                "content_type": {
                    "description": "The content type of the result when serialized to disk",
                    "type": "string"
                },
                "save": {
                    "description": "Whether to save the result",
                    "type": "boolean",
                    "default": true
                },
                "file_base_name": {
                    "description": "The base name for saving result and metadata files. The file extension is determined by context and content_type.",
                    "type": "string"
                },
                "fps": {
                    "description": "Frames per second - only used when output is video",
                    "type": "integer",
                    "default": 8
                },
                "samplerate": {
                    "description": "Audio sample rate - only used when output is audio",
                    "type": "integer",
                    "default": 44100
                }
            },
            "additionalProperties": {
                "type": [
                    "string",
                    "number",
                    "object",
                    "array",
                    "boolean"
                ]
            },
            "required": [
                "content_type"
            ]
        }
    }
}