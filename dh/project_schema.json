{
    "$id": "https://github.com/dkackman/diffusers-helper/project",
    "$schema": "https://json-schema.org/draft/2020-12/schema#",
    "description": "The definition of the diffusers-helper project.",
    "type": "object",
    "properties": {
        "seed": {
            "description": "Default seed for the entire project",
            "type": "integer",
            "format": "int64"
        },
        "variables": {
            "description": "Variables to be used in the project across jobs and steps.",
            "additionalProperties": {
                "type": [
                    "string",
                    "integer",
                    "number",
                    "object",
                    "array",
                    "boolean"
                ]
            }
        },
        "jobs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/job"
            }
        }
    },
    "required": [
        "jobs"
    ],
    "$defs": {
        "job": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "seed": {
                    "description": "Default seed for the entire job",
                    "type": "integer",
                    "format": "int64"
                },
                "steps": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/$defs/step"
                    }
                }
            },
            "required": [
                "id",
                "steps"
            ]
        },
        "image": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "format": "uri"
                },
                "size": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "integer",
                            "format": "int16"
                        },
                        "height": {
                            "type": "integer",
                            "format": "int16"
                        }
                    }
                }
            },
            "required": [
                "location"
            ]
        },
        "step": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "seed": {
                    "description": "Default seed for the entire step",
                    "type": "integer",
                    "format": "int64"
                },
                "pipeline": {
                    "$ref": "#/$defs/pipeline"
                },
                "iterations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/iteration"
                    }
                }
            },
            "required": [
                "name",
                "pipeline",
                "iterations"
            ]
        },
        "pipeline": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/$defs/pipeline_configuration"
                },
                "scheduler": {
                    "$ref": "#/$defs/scheduler"
                },
                "transformer": {
                    "$ref": "#/$defs/transformer"
                },
                "vae": {
                    "$ref": "#/$defs/vae"
                },
                "unet": {
                    "$ref": "#/$defs/unet"
                },
                "text_encoder": {
                    "$ref": "#/$defs/text_encoder"
                },
                "controlnet": {
                    "$ref": "#/$defs/controlnet"
                },
                "preprocessors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/preprocessor"
                    }
                },
                "loras": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/lora"
                    }
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "pipeline_configuration": {
            "type": "object",
            "properties": {
                "offload": {
                    "type": "string",
                    "enum": [
                        "full",
                        "sequential"
                    ]
                },
                "pipeline_type": {
                    "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                    "type": "string"
                },
                "vae": {
                    "type": "object",
                    "properties": {
                        "enable_slicing": {
                            "type": "boolean"
                        },
                        "enable_tiling": {
                            "type": "boolean"
                        },
                        "set_memory_format": {
                            "type": "boolean"
                        }
                    }
                },
                "unet": {
                    "type": "object",
                    "properties": {
                        "enable_forward_chunking": {
                            "type": "boolean"
                        },
                        "set_memory_format": {
                            "type": "boolean"
                        }
                    }
                },
                "shared_components": {
                    "description": "The names of pipeline components to be shared across for future iterations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "reused_components": {
                    "description": "The names of pipeline components to be reused from previous iterations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "pipeline_type"
            ]
        },
        "scheduler": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "scheduler_type": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "scheduler_type"
                    ]
                },
                "from_config_args": {
                    "type": "object",
                    "additionalProperties": {
                        "type": [
                            "string",
                            "number",
                            "object",
                            "array",
                            "boolean"
                        ]
                    }
                }
            },
            "required": [
                "configuration"
            ]
        },
        "quantization": {
            "type": "object",
            "properties": {
                "quantization_library": {
                    "description": "The name of the quantization library to use",
                    "type": "string",
                    "enum": [
                        "torchao",
                        "optimum.quanto"
                    ]
                },
                "weights_type": {
                    "description": "The library specific type of weights to use for quantization",
                    "type": "string"
                }
            }
        },
        "transformer": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "pipeline_type": {
                            "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                            "type": "string"
                        },
                        "quantization": {
                            "$ref": "#/$defs/quantization"
                        },
                        "bits_and_bytes_configuration": {
                            "type": "object",
                            "properties": {
                                "load_in_4bit": {
                                    "type": "boolean"
                                },
                                "bnb_4bit_quant_type": {
                                    "type": "string"
                                },
                                "bnb_4bit_compute_dtype": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": {
                                "type": [
                                    "string",
                                    "number",
                                    "object",
                                    "array",
                                    "boolean"
                                ]
                            }
                        }
                    },
                    "required": [
                        "pipeline_type"
                    ]
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "vae": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "pipeline_type": {
                            "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                            "type": "string"
                        },
                        "quantization": {
                            "$ref": "#/$defs/quantization"
                        }
                    },
                    "required": [
                        "pipeline_type"
                    ]
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "unet": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "pipeline_type": {
                            "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                            "type": "string"
                        }
                    },
                    "required": [
                        "pipeline_type"
                    ]
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "text_encoder": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "object",
                    "properties": {
                        "pipeline_type": {
                            "description": "The python type of pipeline to use in the format 'module.typename' module defaults to diffusers",
                            "type": "string"
                        },
                        "quantization": {
                            "$ref": "#/$defs/quantization"
                        }
                    },
                    "required": [
                        "pipeline_type"
                    ]
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "controlnet": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/$defs/pipeline_configuration"
                },
                "from_pretrained_arguments": {
                    "$ref": "#/$defs/from_pretrained_arguments"
                }
            },
            "required": [
                "configuration",
                "from_pretrained_arguments"
            ]
        },
        "preprocessor": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "capture_intermediate_result": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/$defs/image"
                }
            },
            "required": [
                "name",
                "capture_intermediate_result",
                "image"
            ]
        },
        "lora": {
            "type": "object",
            "properties": {
                "lora_name": {
                    "description": "The huggingface hub name of the lora to be used.",
                    "type": "string"
                },
                "lora_scale": {
                    "description": "The scale factor of the lora when fusing.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0.0,
                    "maximum": 1.0
                }
            },
            "required": [
                "lora_name"
            ]
        },
        "from_pretrained_arguments": {
            "type": "object",
            "description": "Arguments to pass to the from_pretrained function when creating the component",
            "properties": {
                "model_name": {
                    "description": "The huggingface hub name of the pretrained model to load",
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": [
                    "string",
                    "number",
                    "object",
                    "array",
                    "boolean"
                ]
            },
            "required": [
                "model_name"
            ]
        },
        "iteration": {
            "type": "object",
            "properties": {
                "seed": {
                    "description": "The seed for this iteration",
                    "type": "integer",
                    "format": "int64"
                },
                "result_properties": {
                    "type": "object",
                    "properties": {
                        "content_type": {
                            "description": "The content type of the result",
                            "type": "string"
                        },
                        "file_base_name": {
                            "description": "The base name for saving result and metadata files. The file extension is determined by context and content_type.",
                            "type": "string"
                        },
                        "fps": {
                            "description": "Frames per second - only used when output is video",
                            "type": "integer",
                            "default": 8
                        },
                        "samplerate": {
                            "description": "Audio sample rate - only used when output is audio",
                            "type": "integer",
                            "default": 44100
                        }
                    },
                    "required": [
                        "content_type"
                    ]
                },
                "arguments": {
                    "description": "The arguments to pass to the pipeline",
                    "type": "object",
                    "additionalProperties": {
                        "type": [
                            "string",
                            "integer",
                            "number",
                            "object",
                            "array",
                            "boolean"
                        ]
                    }
                },
                "capture_intermediate_results": {
                    "description": "Key value pairs to capture as intermediate results. If value is non-null it will capture the property of the pipiline output of that name. Otherwise it captures the content_type appropriate pipeline output object.",
                    "type": "object",
                    "properties": {
                        "capture_key": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "intermediate_results": {
                    "description": "Key value pairs of intermediate results to use in this iteration. The key is the name of the intermediate result and the value is the argument name pass to the pipeline.",
                    "type": "object",
                    "properties": {
                        "capture_key": {
                            "description": "The disambiguator of the intermediate result when there are multiple iterations.",
                            "type": "string"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "arguments"
            ]
        },
        "template": {
            "type": "object",
            "properties": {
                "applies_to": {
                    "description": "The name of the pipeline step this template applies to",
                    "type": "string"
                },
                "variables": {
                    "description": "Variables that will drive iterations",
                    "additionalProperties": {
                        "type": [
                            "array"
                        ]
                    }
                },
                "iteration": {
                    "$ref": "#/$defs/iteration"
                }
            },
            "required": [
                "applies_to",
                "variables",
                "iteration"
            ]
        }
    }
}